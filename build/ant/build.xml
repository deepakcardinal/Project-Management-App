<project basedir="../." default="mvn-init" name="Project Management App">

	<property file=".././build/ant/build.properties" />
	<property name="war.name" value="${ant.project.name}.war" />
	<property name="web.dir" value="${basedir}/web" />
	<property name="classes.dir" value="${basedir}/../bin/classes" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="lib.dir" value="${basedir}/../lib" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location=".././lib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<path id="build.classpath">
		<fileset dir="${lib.dir}/maven">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<target name="mvn-init" unless="compile.classpath"
		xmlns:artifact="urn:maven-artifact-ant">
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
			uri="urn:maven-artifact-ant" classpath=".././lib/maven-ant-tasks-2.1.3.jar" />
		<condition property="maven.repo.local" value="${maven.repo.local}"
			else="${user.home}/.m2/repository">
			<isset property="maven.repo.local" />
		</condition>
		<echo>maven.repo.local=${maven.repo.local}</echo>
		<artifact:localRepository id="local.repository"
			path="${maven.repo.local}" />
		<artifact:pom file="./maven/pom.xml" id="maven.project" />
		<artifact:dependencies pathId="compile.classpath"
			filesetId="compile.fileset" useScope="compile">
			<pom refid="maven.project" />
			<localRepository refid="local.repository" />
		</artifact:dependencies>
		<artifact:dependencies pathId="test.classpath"
			filesetId="test.fileset" useScope="test">
			<pom refid="maven.project" />
			<localRepository refid="local.repository" />
		</artifact:dependencies>
		<artifact:dependencies pathId="runtime.classpath"
			filesetId="runtime.fileset" useScope="runtime">
			<pom refid="maven.project" />
			<localRepository refid="local.repository" />
		</artifact:dependencies>
	</target>

	<target name="compile" depends="mvn-init">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${basedir}/../src" destdir="${classes.dir}" classpathref="compile.classpath"
			includeantruntime="false" />
		<copy todir="${classes.dir}">
			<fileset dir="${basedir}/../src" excludes="**/*.java" />
		</copy>
	</target>

	<macrodef name="war-exploded">
		<attribute name="deployDir" default="target/${war.name}" />
		<sequential>

			<copy todir="@{deployDir}/WEB-INF/classes">
				<fileset dir="${classes.dir}" />
			</copy>
			<copy todir="@{deployDir}/WEB-INF/lib" flatten="true">
				<fileset refid="runtime.fileset" />
			</copy>

			<copy todir="@{deployDir}" flatten="false">
				<fileset dir=".././web" />
			</copy>

		</sequential>
	</macrodef>

	<target name="war-exploded" depends="compile">
		<war-exploded />
	</target>

	<target name="war" depends="war-exploded">
		<zip destfile="target/${war.name}.war" basedir="target/${war.name}" />
	</target>

	<target name="Container_Name"
		description="Get Container Name from properties file and checks if container is tomcat or jboss">
		<condition property="container">
			<contains string="${appserver.name}" substring="tomcat">
			</contains>
		</condition>
	</target>
	<target name="clean.appserver" depends="Container_Name"
		description="Delete deployment directories from appserver (as defined in build.properties) ">
		<echo>${ant.version}</echo>
		<echo>${appserver.name}</echo>
		<if>
			<equals arg1="${container}" arg2="true" />
			<then>
				<echo message="Containser is Tomcat" />
				<delete dir="${appserver.deploy.dir}/${war.name}" />
				<delete dir="${appserver.deploy.dir}/logs/" />
				<delete dir="${appserver.deploy.dir}/temp/" />
				<delete dir="${appserver.deploy.dir}/work/" />
			</then>
			<else>
				<echo message="Container is JBOSS" />
				<delete dir="${appserver.deploy.dir}/${war.name}" />
				<delete dir="${appserver.root.dir}/server/default/log/" />
				<delete dir="${appserver.root.dir}/server/default/tmp/" />
				<delete dir="${appserver.root.dir}/server/default/work/" />
				<delete dir="${appserver.root.dir}/server/default/data/" />
			</else>
		</if>
	</target>

	<target name="deploy" depends="clean.appserver">
		<zip destfile="target/${war.name}.war" basedir="target/${war.name}" />
	</target>

	<target name="clean" description="Delete all compiled objects">

		<delete dir="${dist.dir}" />
		<delete dir="${classes.dir}" />
	</target>

	<target name="copy-maven-jar" description="Copy all maven jars to web lib directories">
		<copy todir="${basedir}/../web/WEB-INF/lib" flatten="true">
			<fileset dir="${lib.dir}/maven"  >    
            <include name="**/*.jar" />    
   </fileset>
		</copy>

	</target>

</project>
